var searchIndex = {};
searchIndex["embedded_hal"] = {"doc":"A minimal Hardware Abstraction Layer (HAL) for embedded systems","items":[[4,"Direction","embedded_hal","Count direction",null,null],[13,"Downcounting","","3, 2, 1",0,null],[13,"Upcounting","","1, 2, 3",0,null],[0,"prelude","","The prelude is a collection of all the traits in this crate",null,null],[8,"Capture","","Input capture",null,null],[16,"Error","","Enumeration of `Capture` errors",1,null],[16,"Channel","","Enumeration of channels that can be used with this `Capture` interface",1,null],[16,"Time","","A time unit that can be converted into a human time unit (e.g. seconds)",1,null],[16,"Capture","","The type of the value returned by `capture`",1,null],[10,"capture","","\"Waits\" for a transition in the capture `channel` and returns the value of counter at that instant",1,null],[10,"disable","","Disables a capture `channel`",1,null],[10,"enable","","Enables a capture `channel`",1,null],[10,"get_resolution","","Returns the current resolution",1,null],[10,"set_resolution","","Sets the resolution of the capture timer",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[8,"Pwm","","Pulse Width Modulation",null,null],[16,"Channel","","Enumeration of channels that can be used with this `Pwm` interface",2,null],[16,"Time","","A time unit that can be converted into a human time unit (e.g. seconds)",2,null],[16,"Duty","","Type for the `duty` methods",2,null],[10,"disable","","Disables a PWM `channel`",2,null],[10,"enable","","Enables a PWM `channel`",2,null],[10,"get_period","","Returns the current PWM period",2,null],[10,"get_duty","","Returns the current duty cycle",2,null],[10,"get_max_duty","","Returns the maximum duty cycle value",2,null],[10,"set_duty","","Sets a new duty cycle",2,null],[10,"set_period","","Sets a new PWM period",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[8,"Qei","","Quadrature encoder interface",null,null],[16,"Count","","The type of the value returned by `count`",3,null],[10,"count","","Returns the current pulse count of the encoder",3,null],[10,"direction","","Returns the count direction",3,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[8,"Serial","","Serial interface",null,null],[16,"Error","","Serial interface error",4,null],[10,"read","","Reads a single word from the serial interface",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"write","","Writes a single word to the serial interface",4,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"result"}}],[8,"Spi","","Serial Peripheral Interface (full duplex master mode)",null,null],[16,"Error","","An enumeration of SPI errors",5,null],[10,"read","","Reads the word stored in the shift register",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"send","","Sends a word to the slave",5,{"inputs":[{"name":"self"},{"name":"word"}],"output":{"name":"result"}}],[8,"Timer","","Timer used for timeouts",null,null],[16,"Time","","A time unit that can be converted into a human time unit (e.g. seconds)",6,null],[10,"get_timeout","","Returns the current timeout",6,null],[10,"pause","","Pauses the timer",6,{"inputs":[{"name":"self"}],"output":null}],[10,"restart","","Restarts the timer count to zero",6,{"inputs":[{"name":"self"}],"output":null}],[10,"resume","","Resumes the timer count",6,{"inputs":[{"name":"self"}],"output":null}],[10,"set_timeout","","Sets a new timeout",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"wait","","\"Waits\" until the timer times out",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}]],"paths":[[4,"Direction"],[8,"Capture"],[8,"Pwm"],[8,"Qei"],[8,"Serial"],[8,"Spi"],[8,"Timer"]]};
searchIndex["nb"] = {"doc":"Minimal and reusable non-blocking I/O layer","items":[[4,"Error","nb","A non-blocking error",null,null],[13,"Other","","A different kind of error",0,null],[13,"WouldBlock","","This operation requires blocking behavior to complete",0,null],[6,"Result","","A non-blocking result",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"await","","Await operation (won't work until the language gains support for generators)",null,null],[14,"block","","Turns the non-blocking expression `$e` into a blocking operation.",null,null],[14,"try_nb","","Future adapter",null,null]],"paths":[[4,"Error"]]};
initSearch(searchIndex);
